//-- Functional GReater than

const { isCallable } = require('../callable.cjs');
const { FIF } = require( '../fif.cjs' );
const { FIM } = require('../fim.cjs');
const { FEQ } = require( './feq.cjs' );

function FGR(
  assertGreater,
  assertLesser,
  treatConditionally = 1
) {

  FIM(
    () => {

      FIF( ( isCallable(assertGreater) ),
        () => {
          assertGreater = assertGreater()
        }
      )

      FIF( ( isCallable(assertLesser) ),
        () => {
          assertLesser = assertLesser()
        }
      )

    }
  )

  const condition = ( assertGreater > assertLesser );

  assertGreater = FIF(
    (typeof assertGreater !== 'number')
    ,
    () => {
      
      return FIF(
        (
          FEQ(typeof assertGreater, 'null') || FEQ(typeof assertGreater, 'undefined')
        )
        ,
        () => 0,
        () => assertGreater.length
      );
      
    },
    () => assertGreater
  );
  
  assertLesser = FIF(
    (typeof assertLesser !== 'number')
    ,
    () => {
      
      return FIF(
        (
          FEQ(typeof assertLesser, 'null') || FEQ(typeof assertLesser, 'undefined')
        )
        ,
        () => 0,
        () => assertLesser.length
      );
      
    },
    () => assertLesser
  );
  
  return FIF(
    ( treatConditionally )
    ,
    () => {
      
      return FIF(
        ( condition )
        ,
        () => 1,
        () => 0
      )
      
    }
    ,
    () => {
      
      return FIF(
        ( condition ),
        () => assertGreater,
        () => assertLesser
      )
      
    }
  );
  
}

module.exports = {
  FGR
}