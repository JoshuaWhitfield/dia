const { FIM } = require( '../fim.cjs' );
const { createStack } = require( './stack.cjs' );
const { createIdentifier } = require( '../utils/md5.cjs' );

const ID = createIdentifier();

class Edge {
  constructor(value) {
    this.id = ID.generate('edge')
    this.value = value;
    this.origin = value;
    this.history = createStack([value]);
    this.folds = [];
  }

  get = () => this.value;
  set = (value) => {
    this.value = value;
    this.history.add(value);
  }
  reset = () => {
    this.value = this.history[0];
    this.origin = this.history[0];
    this.history = [this.value];
    this.folds = [];
  }
  getHistory = () => this.history;
  getOrigin = () => this.origin;
  getLength = () => this.history.length;
  getFolds = () => this.folds;
  setFolds = (value) => { this.folds = value; }
  resetFolds = () => { this.folds = []; }
  pushFolds = (value) => { this.folds.push([value]) }
  foldWith = (counterEdge) => {
    
    return FIM(
      () => {
        const generateFolds = (self, entity) => {
          return {
            origin: self,
            value: [self.getHistory(), entity.getHistory()],
            heads: [ self.get(), entity.get() ],
            tails: [ self.getHistory()[0], entity.getHistory()[0] ]
          }
        }

        counterEdge.pushFolds(generateFolds(counterEdge, this))
        const foldedEdges = generateFolds(this, counterEdge)
        this.pushFolds(foldedEdges)

        return foldedEdges;
      }
    )
    
  }

  unfold = (fold, counterFold) => {

    const fold_arr = [fold, counterFold];
    for (let fold of fold_arr) { fold.origin.resetFolds() }
    
  }
  
}

function createEdge(value) {
  return new Edge(value);
}

module.exports = {
  createEdge
};
