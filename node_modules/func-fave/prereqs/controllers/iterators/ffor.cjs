//-- Functional FOR loop

const { createEdge } = require('../models/edge.cjs');
const { createNode } = require('../models/node.cjs');
const { createIterator } = require('./fit.cjs');
const { FIF } = require('../fif.cjs');
const { FDEC } = require('../fdec.cjs');

function FFOR(
  iterable,
  actionFn,
  setNode = {
    'startAt': -1,
    'jump': 1
  }
) {

  const node = createNode();
  node.set({
    index: createEdge(setNode.startAt),
    elem: createEdge(),
    jump: createEdge(setNode.jump),
    self: createEdge(iterable),
    history: createEdge([]),
    back: createEdge(false),
    end: createEdge(false),
    cont: createEdge(false)
  });

  const { index, elem, jump, self, history, back, end, cont } = node.get();

  const iterator = createIterator(
    index,
    elem,
    jump,
    self,
    history,
    back,
    end,
    cont
  )

  return FDEC(
    (
      FIF(
        (end.get())
        ,
        () => 1,
        () => 0
      )
    ),
    () => {

      iterator.backtracking();
      /* backtrack to index where end.set(true) was called */
      /* remove last iteration from history */
      return node.get().history.get();
      /* end iteration loop */

    },
    () => {

      return FIF(
        (back.get())
        ,
        () => {

          back.set(false);
          return iterator.backtracking(
            actionFn,
            node
          )

        },
        () => {

          return iterator.iterating(
            actionFn,
            node
          )

        }
      )

    }
  )

}

module.exports = {
  FFOR
}