//-- Functional LesseR then

const { FIF } = require( '../fif.cjs' );
const { FEQ } = require( './feq.cjs' );

function FLR(
  assertLesser,
  assertGreater,
  treatConditionally = 1
) {

  FIM(
    () => {

      FIF( ( isCallable(assertLesser) ),
        () => {
          assertLesser = assertLesser()
        }
      )

      FIF( ( isCallable(assertGreater) ),
        () => {
          assertGreater = assertGreater()
        }
      )

    }
  )

  const condition = ( assertLesser < assertGreater );

  assertLesser = FIF(
    (typeof assertLesser !== 'number')
    ,
    () => {
      
      return FIF(
        (FEQ(typeof assertLesser, 'null') || FEQ(typeof assertLesser, 'undefined'))
        ,
        () => 0,
        () => assertLesser.length
      );
      
    },
    () => assertLesser
  );

  assertGreater = FIF(
    (typeof assertGreater !== 'number')
    ,
    () => {
      
      return FIF(
        (FEQ(typeof assertGreater, 'null') || FEQ(typeof assertGreater, 'undefined'))
        ,
        () => 0,
        () => assertGreater.length
      );
      
    },
    () => assertGreater
  );

  return FIF(
    ( treatConditionally )
    ,
    () => {
      
      return FIF(
        ( condition )
        ,
        () => 1,
        () => 0
      )
      
    },
    () => {
      
      return FIF(
        ( condition )
        ,
        () => assertLesser,
        () => assertGreater
      )
      
    }
  );
  
}

module.exports = {
  FLR
}