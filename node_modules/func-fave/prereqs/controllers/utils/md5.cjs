const md5 = require('md5')
const { arr_has } = require( './objects/arrays.cjs' );
const { FIF } = require( '../fif.cjs' );
const { FDEC } = require( '../fdec.cjs' );

function generateMD5(value) {
  return md5(value)
}

class IDENTIFIER {

  generate(type = "edge") {
    const validTypes = [
      'edge',
      'e',
      'node',
      'n'
    ];

    /* if type is edge, do __. else __ */
    return FDEC(
      (
        FIF(
          ( arr_has(type, validTypes) )
          ,
          () => 1,
          () => 0
        )
      )
      ,
      () => {
        return FIF(
          ( type[0].toLowerCase() === 'e' )
          ,
          /* there should always be less nodes than edges */
          () => {
            /* edge id generation logic */
            const min = 1000000000; const max = 9999999999;
            const seed = Math.floor(Math.random() * (max - min + 1)) + min;
            return generateMD5(seed.toString());
          },
          () => {
            /* node id generation logic */
            const min = 10000; const max = 99999;
            const seed = Math.floor(Math.random() * (max - min + 1)) + min;
            return generateMD5(seed.toString());
          }
        )
      },
      () => 0
    )
    
  }
  
}

function createIdentifier() {
  return new IDENTIFIER()
}

module.exports = {
  createIdentifier
}